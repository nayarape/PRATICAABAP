
REPORT ZI07_CARGA.

TABLES: ekko, ekpo, mara, zt07_ped_carga.

INCLUDE ZI07_CARGA_TOP.  " tipos e variáveis globais
INCLUDE ZI07_CARGA_SEL.  " parâmetros da tela
INCLUDE ZI07_CARGA_F01.  " lógicas principais

START-OF-SELECTION.
  PERFORM f_upload_arquivo.   " lê o arquivo txt
  PERFORM f_validacao.        " valida os dados com tabelas padrão
  PERFORM f_inserir_tabelaz.  " insere os dados validados na Z
  PERFORM f_exibir_alv.       " exibe resultado com ALV zebrado
END-OF-SELECTION.


### INCLUDE ZI07\_CARGA\_TOP


TYPES: BEGIN OF ty_entrada,
         ebeln TYPE ekko-ebeln,
         ebelp TYPE ekpo-ebelp,
         matnr TYPE mara-matnr,
         fkimg TYPE ekpo-ktmng,
         netwr TYPE ekpo-netwr,
         erdat TYPE dats,
       END OF ty_entrada.

TYPES: BEGIN OF ty_saida,
         vbeln      TYPE zt07_ped_carga-vbeln,
         posnr      TYPE zt07_ped_carga-posnr,
         matnr      TYPE zt07_ped_carga-matnr,
         fkimg      TYPE zt07_ped_carga-fkimg,
         netwr      TYPE zt07_ped_carga-netwr,
         meins      TYPE zt07_ped_carga-meins,
         waers      TYPE zt07_ped_carga-waers,
         erdat      TYPE zt07_ped_carga-erdat,
         uzeit      TYPE zt07_ped_carga-uzeit,
         data_carga TYPE zt07_ped_carga-data_carga,
         hora_carga TYPE zt07_ped_carga-hora_carga,
         mensagem   TYPE char100,
       END OF ty_saida.

DATA: it_entrada TYPE TABLE OF ty_entrada,
      wa_entrada TYPE ty_entrada,
      it_final   TYPE TABLE OF ty_entrada,
      wa_final   TYPE ty_entrada,
      it_saida   TYPE TABLE OF ty_saida,
      wa_saida   TYPE ty_saida,
      lt_raw     TYPE STANDARD TABLE OF string,
      lv_line    TYPE string,
      lo_alv     TYPE REF TO cl_salv_table.


### INCLUDE ZI07\_CARGA\_SEL

```abap
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-001.
PARAMETERS: p_file TYPE rlgrap-filename OBLIGATORY.
SELECTION-SCREEN END OF BLOCK b1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  CALL FUNCTION 'F4_FILENAME'
    IMPORTING file_name = p_file.



### INCLUDE ZI07\_CARGA\_F01


FORM f_upload_arquivo.
  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename            = p_file
      filetype            = 'ASC'
      has_field_separator = 'X'
    TABLES
      data_tab            = lt_raw
    EXCEPTIONS
      OTHERS              = 1.

  IF sy-subrc <> 0.
    MESSAGE 'Erro no upload do arquivo.' TYPE 'E'.
  ENDIF.

  LOOP AT lt_raw INTO lv_line.
    SPLIT lv_line AT ';' INTO
      wa_entrada-ebeln
      wa_entrada-ebelp
      wa_entrada-matnr
      wa_entrada-fkimg
      wa_entrada-netwr
      wa_entrada-erdat.
    APPEND wa_entrada TO it_entrada.
  ENDLOOP.
ENDFORM.

FORM f_validacao.
  LOOP AT it_entrada INTO wa_entrada.
    SELECT SINGLE ebeln FROM ekko WHERE ebeln = @wa_entrada-ebeln.
    IF sy-subrc <> 0. CONTINUE. ENDIF.

    SELECT SINGLE ebelp FROM ekpo
      WHERE ebeln = @wa_entrada-ebeln
        AND ebelp = @wa_entrada-ebelp.
    IF sy-subrc <> 0. CONTINUE. ENDIF.

    SELECT SINGLE matnr FROM mara WHERE matnr = @wa_entrada-matnr.
    IF sy-subrc <> 0. CONTINUE. ENDIF.

    APPEND wa_entrada TO it_final.
  ENDLOOP.
ENDFORM.

FORM f_inserir_tabelaz.
  LOOP AT it_final INTO wa_entrada.

    DATA wa_carga TYPE zt07_ped_carga.

    wa_carga-vbeln      = wa_entrada-ebeln.
    wa_carga-posnr      = wa_entrada-ebelp.
    wa_carga-matnr      = wa_entrada-matnr.
    wa_carga-fkimg      = wa_entrada-fkimg.
    wa_carga-netwr      = wa_entrada-netwr.
    wa_carga-erdat      = wa_entrada-erdat.
    wa_carga-uzeit      = sy-uzeit.
    wa_carga-data_carga = sy-datum.
    wa_carga-hora_carga = sy-uzeit.

    SELECT SINGLE meins waers INTO (wa_carga-meins, wa_carga-waers)
      FROM ekpo
      WHERE ebeln = wa_entrada-ebeln
        AND ebelp = wa_entrada-ebelp.

    INSERT zt07_ped_carga FROM wa_carga.

    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.

      " Atribuição manual campo a campo
      wa_saida-vbeln      = wa_carga-vbeln.
      wa_saida-posnr      = wa_carga-posnr.
      wa_saida-matnr      = wa_carga-matnr.
      wa_saida-fkimg      = wa_carga-fkimg.
      wa_saida-netwr      = wa_carga-netwr.
      wa_saida-meins      = wa_carga-meins.
      wa_saida-waers      = wa_carga-waers.
      wa_saida-erdat      = wa_carga-erdat.
      wa_saida-uzeit      = wa_carga-uzeit.
      wa_saida-data_carga = wa_carga-data_carga.
      wa_saida-hora_carga = wa_carga-hora_carga.

      wa_saida-mensagem = 'Registro inserido com sucesso'.
      APPEND wa_saida TO it_saida.
    ELSE.
      ROLLBACK WORK.
    ENDIF.

  ENDLOOP.
ENDFORM.

FORM f_exibir_alv.
  DATA: lo_display TYPE REF TO cl_salv_display_settings.

  TRY.
      cl_salv_table=>factory(
        IMPORTING r_salv_table = lo_alv
        CHANGING  t_table      = it_saida ).

      " Ativa o padrão zebrado (alternância de cores nas linhas)
      lo_display = lo_alv->get_display_settings( ).
      lo_display->set_striped_pattern( cl_salv_display_settings=>true ).

      lo_alv->display( ).

    CATCH cx_salv_msg INTO DATA(lx_msg).
      MESSAGE lx_msg->get_text( ) TYPE 'E'.
  ENDTRY.
ENDFORM.
```
